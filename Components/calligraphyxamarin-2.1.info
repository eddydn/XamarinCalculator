{"Name":"CalligraphyXamarin","Id":2331,"Alias":"calligraphyxamarin","Description":"This component is a simple binding of the Calligraphy Android library here. As of now it is using **version 2.1** of the Calligraphy repo.\n\n[https://github.com/chrisjenx/Calligraphy](https://github.com/chrisjenx/Calligraphy)\n\nYou can find the source code on github here: [GitHub](https://github.com/kevinskrei/XamarinCalligraphy)\n\n## Example ##\n---\nStep 1:\nAdd your otf/ttf fonts to your `Assets/fonts` folder.\n\nStep 2:\nIn your `Application` subclass `OnCreate` method put your `InitDefault` method here like:\n\n    CalligraphyConfig.InitDefault(new CalligraphyConfig.Builder()\n\t\t\t\t.SetDefaultFontPath(\"fonts/your_font.ttf\")\n\t\t\t\t.SetFontAttrId(Resource.Attribute.fontPath)\n\t\t\t\t.Build());\n\nMake sure to replace the \"fonts/your_fonts.tff\" with your folder/file.\n\nStep 3:\nIn your `BaseActivity` override `AttachBaseContext` method.\n    \n    protected override void AttachBaseContext(Android.Content.Context @base)\n\t{\n\t\tbase.AttachBaseContext (CalligraphyContextWrapper.Wrap(@base));\n\t}\n\nStep 4:\nUsing either direct XML manipulation in your layout files or in your styles, set the `fontPath` attribute like\n\n    \u003cTextView\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"This text should be converted to a different font.\"\n    \tfontPath=\"fonts/your_font.ttf\" /\u003e\n    \t\n Or you styles\n \n You should now run the app and see your font for the `TextView`\u0027s.\n \n## Attribution ##\n---\n\u003cdiv\u003eIcons made by \u003ca href=\"http://www.freepik.com\" title=\"Freepik\"\u003eFreepik\u003c/a\u003e from \u003ca href=\"http://www.flaticon.com\" title=\"Flaticon\"\u003ewww.flaticon.com\u003c/a\u003e             is licensed by \u003ca href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\"\u003eCC BY 3.0\u003c/a\u003e\u003c/div\u003e\n\nCode taken from https://github.com/chrisjenx/Calligraphy\n ","Version":"2.1","Summary":"Calligraphy Binding for Xamarin Android","QuickStart":"## Example ##\n---\nStep 1:\nAdd your otf/ttf fonts to your `Assets/fonts` folder.\n\nStep 2:\nIn your `Application` subclass `OnCreate` method put your `InitDefault` method here like:\n\n    CalligraphyConfig.InitDefault(new CalligraphyConfig.Builder()\n\t\t\t\t.SetDefaultFontPath(\"fonts/your_font.ttf\")\n\t\t\t\t.SetFontAttrId(Resource.Attribute.fontPath)\n\t\t\t\t.Build());\n\nMake sure to replace the \"fonts/your_fonts.tff\" with your folder/file.\n\nStep 3:\nIn your `BaseActivity` override `AttachBaseContext` method.\n    \n    protected override void AttachBaseContext(Android.Content.Context @base)\n\t{\n\t\tbase.AttachBaseContext (CalligraphyContextWrapper.Wrap(@base));\n\t}\n\nStep 4:\nUsing either direct XML manipulation in your layout files or in your styles, set the `fontPath` attribute like\n\n    \u003cTextView\n    \tandroid:layout_width=\"match_parent\"\n    \tandroid:layout_height=\"wrap_content\"\n    \tandroid:text=\"This text should be converted to a different font.\"\n    \tfontPath=\"fonts/your_font.ttf\" /\u003e\n    \t\n Or you styles\n \n You should now run the app and see your font for the `TextView`\u0027s.","Hash":"2b848cef7ebdd4021bfb1798b2cde87e","TargetPlatforms":["android"],"TrialHash":null}